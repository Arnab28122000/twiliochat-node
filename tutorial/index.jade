.chapter(data-title='Twilio Chat')
  .step(data-title='Introduction',
        data-file='app.js')
    :markdown
      ## Introduction

      Ready to implement a chat application using Twilio Programmable Chat Client and
      Node.js | [Express](//expressjs.com/en/index.html)?

      This application allow users to exchange messages through different channels,
      using the Twilio Programmable Chat API. On this example, we'll show how to use
      this API capabilities to manage channels and their usages.

      ---

      **See Also:**
      * [Getting Started with Express](//expressjs.com/en/starter/installing.html)
      * [Programmable Chat API](//www.twilio.com/docs/api/chat)
      * [Channels and Messages](//www.twilio.com/docs/api/chat/guides/channels)
      * [User Identity & Access Tokens](//www.twilio.com/docs/api/chat/guides/create-tokens)
      * [Twilio Programmable Chat Client Reference](//media.twiliocdn.com/sdk/js/chat/releases/0.11.1/docs/)

  .step(data-title='Token Generation',
        data-file='services/tokenService.js')
    :markdown
      ## Token Generation

      In order to create a Twilio Programmable Chat client, you will need an access
      token. This token holds information about your Twilio Account and
      Programmable Chat API keys.

      We generate this token by creating a new `AccessToken` and providing it with
      an `IpMessagingGrant`. The new AccessToken object is created using your Twilio
      credentials.

      ---

      ** See also **
      * [The Twilio Node Helper Library](//www.twilio.com/docs/node/install)
      * [Twilio API Access Tokens](//www.twilio.com/docs/api/rest/access-tokens)


  .step(data-title='Token Generation Controller',
        data-file='routes/token.js',
        data-highlight='5-17')
    :markdown
      ## Token Generation Controller

      On our controller we expose the endpoint responsible for providing a valid
      token using the information provided as parameters:

      * `device`: identifies the device being used.
      * `identity`: identifies the user itself.

      Once we have used the `tokenService` object to generate a token we can use
      the AccessToken's method as `token.toJwt()` to get the token as a String.
      Then we just return the token as a JSON encoded string.

  .step(data-title='Initializing the Client',
        data-file='public/js/twiliochat.js',
        data-highlight='83-104')
    :markdown
      ## Initializing the Programmable Chat Client

      Our client fetches a new Token by making a POST request to our endpoint 
      when it calls the `fetchAccessToken` method.

      With the token we can then initialize `Twilio.Chat.Client` in 
      `connectMessagingClient`.

  .step(data-title='Getting the Channel List',
            data-file='public/js/twiliochat.js',
            data-highlight='123-137')
    :markdown
      ## Getting the Channel List

      After initializing the client we can use its `getPublicChannels` method
      to retrieve all visible channels. The method returns a promise which
      we use to show the list of channels retrieved on the UI.

      ---

      ** See Also **
      * [Client API: Get Channels](//www.twilio.com/docs/api/chat/guides/channels)

  .step(data-title='Join the General Channel',
        data-file='public/js/twiliochat.js',
        data-highlight='139-155')
    :markdown
      ## Join the General Channel

      This application will try to join a channel called "General Channel" when it starts.
      If the channel doesn't exist, we'll create one with that name. The scope of
      this example application will show you how to work only with public channels,
      but the Programmable Chat client allows you to create private channels and handle
      invitations.

      Notice we set a unique name for the general channel as we don't want to
      create a new general channel every time we start the application.

  .step(data-title='Listen to Channel Events',
        data-file='public/js/twiliochat.js',
        data-highlight='173-181')
    :markdown
      ## Listen to Channel Events

      Next we listen for channel events. In our case, we're setting listeners to the
      following events:

      * `messageAdded`: When another member sends a message to the channel you are connected to.
      * `typingStarted`: When another member is typing a message on the channel that you are connected to.
      * `typingEnded`: When another member stops typing a message on the channel that you are connected to.
      * `memberJoined`: When another member joins the channel that you are connected to.
      * `memberLeft`: When another member leaves the channel that you are connected to.

      We register a different function to handle each particular event.

      ---

      *** For a complete list of channel events ***
      * [Channel API](//www.twilio.com/docs/api/chat/guides/channels)

  .step(data-title='Listen to Client Events',
        data-file='public/js/twiliochat.js',
        data-highlight='93-104')
    :markdown
      ## Listen to Client Events

      Just like with channels, we can register handlers for events on the Client:

      * `channelAdded`: When a channel becomes visible to the Client.
      * `channelRemoved`: When a channel is no longer visible to the Client.
      * `tokenExpired`: When the supplied token expires.

      *** For a complete list of client events ***
      * [Programmable Chat Client API](//www.twilio.com/docs/api/chat)

  .step(data-title='Creating a Channel',
        data-file='public/js/twiliochat.js',
        data-highlight='59-70')
    :markdown
      ## Creating a Channel

      When a user clicks on the "+ Channel" link we'll show
      an input text field where it's possible to type the name of the new channel.
      Creating a channel is as simple as calling `createChannel` with an object
      that has the `friendlyName` key. You can create a channel
      with more options listed on the
      [Channels section](//www.twilio.com/docs/api/chat/guides/channels) of the Programmable Chat documentation.

      ---

      ** See Also **
      * [Programmable Chat Client API: Create a Channel](//www.twilio.com/docs/api/chat/guides/channels)


  .step(data-title='Joining Other Channels',
        data-file='public/js/twiliochat.js',
        data-highlight='139-155')
    :markdown
      ## Joining Other Channels

      When you tap on the name of a channel from the sidebar, that channel is set
      as the `selectedChannel`. The `selectChannel` method takes care of joining
      to the selected channel and setting up the `selectedChannel`.

  .step(data-title='Deleting a Channel',
        data-file='public/js/twiliochat.js',
        data-highlight='310-326')
    :markdown
      ## Deleting a Channel

      Deleting a channel is easier than creating one. The application
      lets the user delete the channel they are currently on through the
      "delete current channel" link. The only thing you need to do to
      actually delete the channel from Twilio, is call the `delete` method
      on the channel you are trying to delete. Like other methods on the `Channel`
      object, it'll return a promise where you can set the success handler.

      ---

      ** See Also **
      * [Channel API: Create a Channel](//media.twiliocdn.com/sdk/js/chat/releases/0.11.1/docs/Channel.html)
  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      That's it! We've just implemented a simple chat application for Node.js using
      Express. If you are a Node developer working with Twilio, you might want
      to check out these other tutorials:

      [**Click-To-Call**](//www.twilio.com/docs/howto/walkthrough/click-to-call/node/express)

      Put a button on your web page that connects visitors to live support or sales people via telephone.

      [**Automated Survey**](//www.twilio.com/docs/howto/walkthrough/automated-survey/node/express)

      Instantly collect structured data from your users with a survey conducted
      over a voice call or SMS text messages.

      ## Did this help?

      Thanks for checking this tutorial out! If you have any feedback
      to share with us, we'd love to hear it.
      [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
